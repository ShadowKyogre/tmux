#!env perldoc

=for comment
This is the source for the other README-tmux-scripting.*
 $ perldoc -o nroff README-tmux-scripting.pod > tmux-tcl.1
 $ perldoc -o html README-tmux-scripting.pod > tmux-tcl.html

=for comment
This document is in Pod format.
To read this, use a Pod formatter, like "perldoc perlpod", e.g.
 # Read on terminal screen:
 $ perldoc README-tmux-scripting.pod
 # Generate HTML:
 $ perldoc -o html README-tmux-scripting.pod
 # Generate manpage:
 $ perldoc -o nroff README-tmux-scripting.pod

=head1 NAME

tmux with sensible scripting

=head1 SYNOPSIS

It was never previously possible in tmux:

  # Mark the current word in vi-copy mode
  bind-key -t vi-copy M-Enter tcl {
    clear-selection
    previous-space
    begin-selection
    next-space-end
  }

  # Open selection in vim in mini-window
  bind-key -t vi-copy Y tcl {
    split-window -c [f #{pane_current_path}] -l 5 "
		echo -n [shell-quote [copy-mode-selection]] | vim -R -"
  }

  # Open selection in emacs in mini-window
  bind-key -t emacs-copy Y tcl {
	split-window -c [f #{pane_current_path}] -l 5 "
		emacs --insert <(echo -n [shell-quote [copy-mode-selection]])"
  }

  #choose from list and switch to git branch
  choose-from-list {*}[split [exec git branch -av] "\n"] -onselect {
    exec git checkout [lindex [split [string range $_ 2 end] " "] 0]
  }

=head1 DESCRIPTION

From now on we have first class turing-complete
config-and-command language support in tmux.

The choice of the language to use is simple:
(A) TCL is easily embeddable and
(B) the syntax is very much like tmux-lang and bash

All your old configs will continue to work exactly as they did.

Great products for geeks have full-fledged scripting support:
vim, emacs, and many others.
Tmux is a great thing, too. And now it can be scripted as well.

TCL extension leaves tmux fully compatible with TCL-less one.
There's only a new tmux command to execute TCL and all tmux
commands are transparently usable from TCL. Including 'mode' ones!

You can assign any number of actions to 'mode' keypresses
and ever write a script of any complexity.

=head1 TMUX EXTENSIONS

The changes against the original tmux are:

=over

=item *

New command B<C<tcl>> and alias B<C<t>> in all modes

From now on, just use C<tcl [command]> to script in TCL.

If there's a value returned from script/function, it will be displayed
on screen and in message area (C<^B ~> for multiline output).

=item *

Global option B<C<tcl>>

Numeric (boolean) option to control the mode of command prompt within tmux.
If this evaluates to true (non-zero), the command prompt (C<^B :>) will accept
tcl commands directly.

=item *

Global option B<C<have_tcl>>

Numeric (boolean) flag that would tell you that TCL is present
in this version of tmux.

To execute additional TCL init config in a compatible way,
add the following to your F<.tmux.conf>:

  if-shell -F "#{have_tcl}" "tcl source ~/.tmux.tcl"

and put a file named F<.tmux.tcl> in your home dir.

Done so, your config will work in both standard and scriptable versions of tmux.

=back

=head1 TCL MODE

This section presumes tmux is in TCL command mode.

To switch it on, execute this command in tmux, or add to config:

  set tcl 1

=head2 tmux commands access from TCL

=over

=item *

TCL script has all tmux commands directly accessible in three ways:

1. in namespace B<C<::tmux>>

2. as global commands

3. as global commands prefixed with B<C<:>>

For example, the existing tmux command C<list-keys> has three forms in tcl:
C<list-keys>, C<:list-keys> and C<::tmux::list-keys>.

Some of tmux commands/aliases use common or built-in TCL command names,
such as C<if>, C<rename>, C<info>, C<set>, C<source>, C<format>.
These commands are not added to the global namespace but are
easily accessible with C<:> prefix and under C<::tmux> namespace.

The full list of tmux commands can be found in L<tmux(1)> manual.

or (better) way to do it in TCL mode:

  print {*}[info commands ::tmux::*]

=item *

Originally, "mode" commands are not accessible and not scriptable in tmux.
In TCL mode, all of them are first-class commands and can be used as any
other command.

In TCL, "mode" commands are accessible in various ways:

=over

=item B<C<::tmux::mode:MODENAME::COMMAND>>

where MODENAME is C<copy> or C<choice>.

The commands in each mode are implemented on their own in tmux.
The commands that happen to have the same name are internally coded
as separate functions to do different things in modes.
This is why TCL has to ensure the current mode is the right one for 'mode' command.

This form of "mode" command the safest and preferable (less convenient, though).

=item B<C<::tmux::mode::COMMAND>>, B<C<::tmux::COMMAND>>, global B<C<COMMAND>>

These forms of "mode" commands try to auto-detect the current pane mode
and issue the correct "mode" command.

In a particular mode not all of the commands will actually work because
these namespaces contain the commands for all modes.

This form is short and convenient to use but to make sure the command
is good for the current mode, check C<::tmux::mode::MODENAME::> namespace first.

Some of 'short' command naming can be confusing.

For instance, the command C<up> won't fit for copy-mode but there is a C<cursor-up> one.

If there's a name clash,
"mode" command will yield to the existing one.
But that can always be found under C<::tmux::mode::*> namespace.

=back

The full list of "mode" commands:

  print {*}[info commands ::tmux::mode::*] ; # all mode commands
  print {*}[info commands ::tmux::mode::copy::*] ; # copy mode cmds
  print {*}[info commands ::tmux::mode::choice::*] ; # choice mode cmds

TODO: support 'edit' mode, too.

=back

=head2 New TCL mode commands

=over

=item *

B<C<format>>, B<C<f>>, B<C<format-time>>, B<C<ft>> - get options; format string according to tmux # rules

These functions are useful to query settings and options.

B<C<format-time>> and B<C<ft>> will first call C<strftime> on their argument.

B<C<format>> and B<C<f>> just use internal formatting routine.

  :f #{pane_current_path}

Refer to L<tmux(1)> manpage, C<FORMATS> section.

TODO: document/API for the full list of formattable options

=item *

B<C<parse>>, B<C<parse2script>>, B<C<parse2eval>>, B<C<parse_exec>> -
parse and convert tmux config-or-command to TCL in various ways:

=over

=item B<C<parse [text]>>

return as list of TCL commands (for C<::tmux> namespace)

=item B<C<parse2script [text]>>

return as equivalent TCL script (for C<::tmux> namespace)

=item B<C<parse2eval [text]>>

return as C<eval>able script for global/any namespace

=item B<C<parse_exec [text]>>

parse and execute as TCL

=back

=item *

B<C<output-of-txt>>, B<C<output-of-list>> - capture the output of a command

Since tmux never wanted to do scripting by itself, the most commands
return data as text output.

To be able to deal with it in a programming language, one needs to intercept
the output to put it into a variable or function argument.

This set of functions temporarily divert the output while the code block executes
and return the catch:

  # put command line in TCL mode
  :set tcl
  # list keys in the usual way
  list-keys -t vi-copy
  # return output as a single string
  output-of-txt { list-keys -t vi-copy }
  # return output as list of strings
  output-of-list { list-keys -t vi-copy }

=item *

B<C<pbcopy>>,
B<C<pbpaste>>,
B<C<pbcontent>>,
B<C<pblist>> - clipboard functions:

=over

=item B<C<pbcopy {string}>>

push the string into clipboard buffers

=item B<C<pbpaste>>

not implemented, almost equivalent to S<B<C<:send-keys {pbcontent}>>>

=item B<C<pbcontent>>

return content of the topmost clipboard buffer

=item B<C<pblist>>

return the list of all clipboard buffers

=back

=item *

B<C<copy-mode-selection>> - currently hilighted selection in copy mode

=item *

B<C<print [string ...]>> - output message

Prints message to the messages pane (C<^B ~>).

=item *

Status bar functions:

B<C<status-msg MESSAGE>> Display message on the bottom status bar

B<C<status-msg-clear>> Reset status bar

=item *

B<C<using context { script }>> - execute script in context of another client/session/window/pane

Set default context for the commands in C<script>.

C<context> is a sequence of:

=over

=item B<C<using client {client-spec} { script }>>

=item B<C<using session {session-spec} { script }>>

=item B<C<using window {window-spec} { script }>>

=item B<C<using pane {pane-spec} { script }>>

=back

For the cpecifications, see L<tmux(1)> manual, keywords
C<target-client>, C<target-session>, C<target-window>, C<target-pane>.

B<NOTE> that this will B<not> affect the original tmux commands:
they will still require C<-t> (or whatever) flag to specify the target.

B<Examples:>

  print [f #{pane_current_path}]
  print [using pane %1 {f #{pane_current_path}}]
  print [using pane :.1 {f #{pane_current_path}}]
  print [using window :1 {f #{pane_current_path}}]
  print [using client stty01 {f #{pane_current_path}}]

The cpecifications can nest:
the subsequent cpecifications are considered within the previous ones.

  print [using client stty01 window :1 pane %0 {f #{pane_current_path}}]

=item *

B<C<choose-from-list>> Make choice in choose-mode

      "Usage: choose-from-list {ITEM ...}\n"
      " Switch into choose-mode, make a choice from the list of items\n"
      " if an item starts with '-', this is an option for the item that follows it:\n"
      "  -val : the following element IS the string to display\n"
      "  -id | -tag : identifier for the item\n"
      "  -cmd: script to execute when this item is selected\n"
      "  -selected: this item is initially selected\n"
      "  -selected-idx: specify the number of the tag selected\n"
      "  -selected-id | -selected-tag: specify id of the tag selected\n"
      "  -onselect: script to execute when the choose-mode ends with a selection\n"
      "  -oncancel: script to execute when the user cancels choose-mode\n"
      "  --   : no more options\n"

=item *

B<C<nop [args ...]>> - consume all arguments, do nothing, return nothing

=back

Other helper functions:

=over

=item *

B<C<tmux [code]>> - execute code in C<::tmux> namespace

Almost the same as C<namespace eval ::tmux [code]>.

Intended for easier transition from tmux legacy scripts.

=item *

B<C<read_file>>, B<C<write_file>> - read and write the whole file

=item *

B<C<shell-quote [string]>> - quote string to safely pass to shell

=back

=head1 Why

L<tmux(1)> is a pretty cool terminal multiplexor with unique features.

However, one of its key principles looks arguable to me.
This work is done to address the "use shell for scripting" one.

The author's rationale behind this decision was:
(A) freedom from extra dependencies
and (B) avoid inventing and implementing "yet another" tool language.

Unfortunately, they failed at both:
tmux B<has> its defective 'small config-and-command language';
B<and> it depends on the user's shell which limits tmux scripts compatibility to the same shell's users.

Needless to say, the I<config-and-command tmux small language> is not turing-complete,
it has weird symantics, its parsing and behavior differs by 'mode', context and moon phase.
To make any meaningful action, you'd probably need to spawn a shell
and send the command from outside back to your tmux in which case you risk
to fall down into quote hell.

Even having this limited language, you might find that not all of the features
are available right when you need it (and L<never gonna fix it|https://github.com/tmux/tmux/issues/310>).

That's why you want it to get fixed.

TCL is suitable both as immediate command language at prompt and
as a common programming language.

=head1 SEE ALSO

L<tmux(1)>, L<tcl(3tcl)>, L<tclsh(1)>

L<tmux homepage|http://tmux.github.io/>

tmux L<README|https://github.com/ershov/tmux/blob/master/README>

L<tcl tutorial|http://tcl.tk/man/tcl8.5/tutorial/tcltutorial.html>

L<tcl documentation site|http://tcl.tk/doc/>

=head1 AUTHOR

Yury Ershov L<mailto:yuriy.ershov@gmail.com>

=cut
